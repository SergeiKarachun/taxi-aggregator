server:
  port: 8765
spring:
  application:
    name: api-gateway
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/taxi-aggregator-realm
        registration:
          taxi-aggregator-client:
            provider: keycloak
            client-id: taxi-aggregator-client
            client-secret: KlPbiFtJCFELGoOpNDkqzP1uGvDLZi3Z
            authorization-grant-type: authorization_code
            scope: openid
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/taxi-aggregator-realm/protocol/openid-connect/certs
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      default-filters:
        - TokenRelay=
      routes:
        - id: passenger-service
          predicates:
            - Path=/api/v1/passengers/**
          uri: lb://PASSENGER-SERVICE
          filters:
            - name: CircuitBreaker
              args:
                name: passenger-service
                fallbackUri: forward:/fallback/passenger-service

        - id: driver-service
          uri: lb://DRIVER-SERVICE
          predicates:
            - Path=/api/v1/drivers/**, /api/v1/cars/**
          filters:
            - name: CircuitBreaker
              args:
                name: driver-service
                fallbackUri: forward:/fallback/driver-service

        - id: ride-service
          uri: lb://RIDE-SERVICE
          predicates:
            - Path=/api/v1/rides/**
          filters:
            - name: CircuitBreaker
              args:
                name: ride-service
                fallbackUri: forward:/fallback/ride-service

        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/v1/accounts/**, /api/v1/creditcards/**, /api/v1/transactions/**
          filters:
            - name: CircuitBreaker
              args:
                name: payment-service
                fallbackUri: forward:/fallback/payment-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 5
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
    instances:
      driver-service:
        base-config: default
      passenger-service:
        base-config: default
      ride-service:
        base-config: default
      payment-service:
        base-config: default

management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: [ "prometheus", "health"]
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
